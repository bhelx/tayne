# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ruby-llvm/all/ruby-llvm.rbi
#
# ruby-llvm-8.0.0
module LLVM
  def Array(ty, sz = nil); end
  def Function(argtypes, rettype, options = nil); end
  def Pointer(ty); end
  def Struct(*elt_types); end
  def Type(ty); end
  def Vector(ty, sz); end
  def Void; end
  def make_generic_value(ty, val); end
  def self.Array(ty, sz = nil); end
  def self.Double(val); end
  def self.Float(val); end
  def self.Function(argtypes, rettype, options = nil); end
  def self.Int(val); end
  def self.Pointer(ty); end
  def self.Struct(*elt_types); end
  def self.Type(ty); end
  def self.Vector(ty, sz); end
  def self.Void; end
  def self.const_missing(const); end
  def self.init_jit(*args); end
  def self.init_x86; end
  def self.load_library(libname); end
  def self.make_generic_value(ty, val); end
  def self.with_error_output(&block); end
  def self.with_message_output; end
end
module LLVM::C
  def abi_alignment_of_type(*arg0); end
  def abi_size_of_type(*arg0); end
  def add_aggressive_dce_pass(*arg0); end
  def add_alias(*arg0); end
  def add_alignment_from_assumptions_pass(*arg0); end
  def add_always_inliner_pass(*arg0); end
  def add_analysis_passes(*arg0); end
  def add_argument_promotion_pass(*arg0); end
  def add_attribute_at_index(*arg0); end
  def add_basic_alias_analysis_pass(*arg0); end
  def add_bit_tracking_dce_pass(*arg0); end
  def add_case(*arg0); end
  def add_cfg_simplification_pass(*arg0); end
  def add_clause(*arg0); end
  def add_constant_merge_pass(*arg0); end
  def add_constant_propagation_pass(*arg0); end
  def add_correlated_value_propagation_pass(*arg0); end
  def add_dead_arg_elimination_pass(*arg0); end
  def add_dead_store_elimination_pass(*arg0); end
  def add_demote_memory_to_register_pass(*arg0); end
  def add_destination(*arg0); end
  def add_early_cse_mem_ssa_pass(*arg0); end
  def add_early_cse_pass(*arg0); end
  def add_function(*arg0); end
  def add_function_attrs_pass(*arg0); end
  def add_function_inlining_pass(*arg0); end
  def add_global(*arg0); end
  def add_global_dce_pass(*arg0); end
  def add_global_in_address_space(*arg0); end
  def add_global_mapping(*arg0); end
  def add_global_optimizer_pass(*arg0); end
  def add_gvn_pass(*arg0); end
  def add_incoming(*arg0); end
  def add_ind_var_simplify_pass(*arg0); end
  def add_instruction_combining_pass(*arg0); end
  def add_internalize_pass(*arg0); end
  def add_ip_constant_propagation_pass(*arg0); end
  def add_ipsccp_pass(*arg0); end
  def add_jump_threading_pass(*arg0); end
  def add_licm_pass(*arg0); end
  def add_loop_deletion_pass(*arg0); end
  def add_loop_idiom_pass(*arg0); end
  def add_loop_reroll_pass(*arg0); end
  def add_loop_rotate_pass(*arg0); end
  def add_loop_unroll_pass(*arg0); end
  def add_loop_unswitch_pass(*arg0); end
  def add_lower_expect_intrinsic_pass(*arg0); end
  def add_lower_switch_pass(*arg0); end
  def add_mem_cpy_opt_pass(*arg0); end
  def add_merged_load_store_motion_pass(*arg0); end
  def add_module(*arg0); end
  def add_named_metadata_operand(*arg0); end
  def add_new_gvn_pass(*arg0); end
  def add_partially_inline_lib_calls_pass(*arg0); end
  def add_promote_memory_to_register_pass(*arg0); end
  def add_prune_eh_pass(*arg0); end
  def add_reassociate_pass(*arg0); end
  def add_scalar_repl_aggregates_pass(*arg0); end
  def add_scalar_repl_aggregates_pass_ssa(*arg0); end
  def add_scalar_repl_aggregates_pass_with_threshold(*arg0); end
  def add_scalarizer_pass(*arg0); end
  def add_sccp_pass(*arg0); end
  def add_scoped_no_alias_aa_pass(*arg0); end
  def add_simplify_lib_calls_pass(*arg0); end
  def add_strip_dead_prototypes_pass(*arg0); end
  def add_strip_symbols_pass(*arg0); end
  def add_symbol(*arg0); end
  def add_tail_call_elimination_pass(*arg0); end
  def add_target_dependent_function_attr(*arg0); end
  def add_target_library_info(*arg0); end
  def add_type_based_alias_analysis_pass(*arg0); end
  def add_verifier_pass(*arg0); end
  def align_of(*arg0); end
  def append_basic_block(*arg0); end
  def append_basic_block_in_context(*arg0); end
  def array_type(*arg0); end
  def basic_block_as_value(*arg0); end
  def block_address(*arg0); end
  def build_a_shr(*arg0); end
  def build_add(*arg0); end
  def build_addr_space_cast(*arg0); end
  def build_aggregate_ret(*arg0); end
  def build_alloca(*arg0); end
  def build_and(*arg0); end
  def build_array_alloca(*arg0); end
  def build_array_malloc(*arg0); end
  def build_atomic_rmw(*arg0); end
  def build_bin_op(*arg0); end
  def build_bit_cast(*arg0); end
  def build_br(*arg0); end
  def build_call(*arg0); end
  def build_cast(*arg0); end
  def build_cond_br(*arg0); end
  def build_exact_s_div(*arg0); end
  def build_extract_element(*arg0); end
  def build_extract_value(*arg0); end
  def build_f_add(*arg0); end
  def build_f_cmp(*arg0); end
  def build_f_div(*arg0); end
  def build_f_mul(*arg0); end
  def build_f_neg(*arg0); end
  def build_f_rem(*arg0); end
  def build_f_sub(*arg0); end
  def build_fence(*arg0); end
  def build_fp_cast(*arg0); end
  def build_fp_ext(*arg0); end
  def build_fp_to_si(*arg0); end
  def build_fp_to_ui(*arg0); end
  def build_fp_trunc(*arg0); end
  def build_free(*arg0); end
  def build_gep(*arg0); end
  def build_global_string(*arg0); end
  def build_global_string_ptr(*arg0); end
  def build_i_cmp(*arg0); end
  def build_in_bounds_gep(*arg0); end
  def build_indirect_br(*arg0); end
  def build_insert_element(*arg0); end
  def build_insert_value(*arg0); end
  def build_int_cast(*arg0); end
  def build_int_to_ptr(*arg0); end
  def build_invoke(*arg0); end
  def build_is_not_null(*arg0); end
  def build_is_null(*arg0); end
  def build_l_shr(*arg0); end
  def build_landing_pad(*arg0); end
  def build_load(*arg0); end
  def build_malloc(*arg0); end
  def build_mul(*arg0); end
  def build_neg(*arg0); end
  def build_not(*arg0); end
  def build_nsw_add(*arg0); end
  def build_nsw_mul(*arg0); end
  def build_nsw_neg(*arg0); end
  def build_nsw_sub(*arg0); end
  def build_nuw_add(*arg0); end
  def build_nuw_mul(*arg0); end
  def build_nuw_neg(*arg0); end
  def build_nuw_sub(*arg0); end
  def build_or(*arg0); end
  def build_phi(*arg0); end
  def build_pointer_cast(*arg0); end
  def build_ptr_diff(*arg0); end
  def build_ptr_to_int(*arg0); end
  def build_resume(*arg0); end
  def build_ret(*arg0); end
  def build_ret_void(*arg0); end
  def build_s_div(*arg0); end
  def build_s_ext(*arg0); end
  def build_s_ext_or_bit_cast(*arg0); end
  def build_s_rem(*arg0); end
  def build_select(*arg0); end
  def build_shl(*arg0); end
  def build_shuffle_vector(*arg0); end
  def build_si_to_fp(*arg0); end
  def build_store(*arg0); end
  def build_struct_gep(*arg0); end
  def build_sub(*arg0); end
  def build_switch(*arg0); end
  def build_trunc(*arg0); end
  def build_trunc_or_bit_cast(*arg0); end
  def build_u_div(*arg0); end
  def build_u_rem(*arg0); end
  def build_ui_to_fp(*arg0); end
  def build_unreachable(*arg0); end
  def build_va_arg(*arg0); end
  def build_xor(*arg0); end
  def build_z_ext(*arg0); end
  def build_z_ext_or_bit_cast(*arg0); end
  def byte_order(*arg0); end
  def call_frame_alignment_of_type(*arg0); end
  def clear_insertion_position(*arg0); end
  def clone_module(*arg0); end
  def const_a_shr(*arg0); end
  def const_add(*arg0); end
  def const_addr_space_cast(*arg0); end
  def const_all_ones(*arg0); end
  def const_and(*arg0); end
  def const_array(*arg0); end
  def const_bit_cast(*arg0); end
  def const_exact_s_div(*arg0); end
  def const_extract_element(*arg0); end
  def const_extract_value(*arg0); end
  def const_f_add(*arg0); end
  def const_f_cmp(*arg0); end
  def const_f_div(*arg0); end
  def const_f_mul(*arg0); end
  def const_f_neg(*arg0); end
  def const_f_rem(*arg0); end
  def const_f_sub(*arg0); end
  def const_fp_cast(*arg0); end
  def const_fp_ext(*arg0); end
  def const_fp_to_si(*arg0); end
  def const_fp_to_ui(*arg0); end
  def const_fp_trunc(*arg0); end
  def const_gep(*arg0); end
  def const_i_cmp(*arg0); end
  def const_in_bounds_gep(*arg0); end
  def const_inline_asm(*arg0); end
  def const_insert_element(*arg0); end
  def const_insert_value(*arg0); end
  def const_int(*arg0); end
  def const_int_cast(*arg0); end
  def const_int_get_s_ext_value(*arg0); end
  def const_int_get_z_ext_value(*arg0); end
  def const_int_of_arbitrary_precision(*arg0); end
  def const_int_of_string(*arg0); end
  def const_int_of_string_and_size(*arg0); end
  def const_int_to_ptr(*arg0); end
  def const_l_shr(*arg0); end
  def const_mul(*arg0); end
  def const_named_struct(*arg0); end
  def const_neg(*arg0); end
  def const_not(*arg0); end
  def const_nsw_add(*arg0); end
  def const_nsw_mul(*arg0); end
  def const_nsw_neg(*arg0); end
  def const_nsw_sub(*arg0); end
  def const_null(*arg0); end
  def const_nuw_add(*arg0); end
  def const_nuw_mul(*arg0); end
  def const_nuw_neg(*arg0); end
  def const_nuw_sub(*arg0); end
  def const_or(*arg0); end
  def const_pointer_cast(*arg0); end
  def const_pointer_null(*arg0); end
  def const_ptr_to_int(*arg0); end
  def const_real(*arg0); end
  def const_real_get_double(*arg0); end
  def const_real_of_string(*arg0); end
  def const_real_of_string_and_size(*arg0); end
  def const_s_div(*arg0); end
  def const_s_ext(*arg0); end
  def const_s_ext_or_bit_cast(*arg0); end
  def const_s_rem(*arg0); end
  def const_select(*arg0); end
  def const_shl(*arg0); end
  def const_shuffle_vector(*arg0); end
  def const_si_to_fp(*arg0); end
  def const_string(*arg0); end
  def const_string_in_context(*arg0); end
  def const_struct(*arg0); end
  def const_struct_in_context(*arg0); end
  def const_sub(*arg0); end
  def const_trunc(*arg0); end
  def const_trunc_or_bit_cast(*arg0); end
  def const_u_div(*arg0); end
  def const_u_rem(*arg0); end
  def const_ui_to_fp(*arg0); end
  def const_vector(*arg0); end
  def const_xor(*arg0); end
  def const_z_ext(*arg0); end
  def const_z_ext_or_bit_cast(*arg0); end
  def context_create(*arg0); end
  def context_dispose(*arg0); end
  def context_set_diagnostic_handler(*arg0); end
  def context_set_yield_callback(*arg0); end
  def copy_string_rep_of_target_data(*arg0); end
  def count_basic_blocks(*arg0); end
  def count_incoming(*arg0); end
  def count_param_types(*arg0); end
  def count_params(*arg0); end
  def count_struct_element_types(*arg0); end
  def create_builder(*arg0); end
  def create_builder_in_context(*arg0); end
  def create_enum_attribute(*arg0); end
  def create_execution_engine_for_module(*arg0); end
  def create_function_pass_manager(*arg0); end
  def create_function_pass_manager_for_module(*arg0); end
  def create_generic_value_of_float(*arg0); end
  def create_generic_value_of_int(*arg0); end
  def create_generic_value_of_pointer(*arg0); end
  def create_interpreter_for_module(*arg0); end
  def create_jit_compiler_for_module(*arg0); end
  def create_mcjit_compiler_for_module(*arg0); end
  def create_memory_buffer_with_contents_of_file(*arg0); end
  def create_memory_buffer_with_memory_range(*arg0); end
  def create_memory_buffer_with_memory_range_copy(*arg0); end
  def create_memory_buffer_with_stdin(*arg0); end
  def create_message(*arg0); end
  def create_module_provider_for_existing_module(*arg0); end
  def create_pass_manager(*arg0); end
  def create_simple_mcjit_memory_manager(*arg0); end
  def create_target_data(*arg0); end
  def create_target_data_layout(*arg0); end
  def create_target_machine(*arg0); end
  def delete_basic_block(*arg0); end
  def delete_function(*arg0); end
  def delete_global(*arg0); end
  def dispose_builder(*arg0); end
  def dispose_execution_engine(*arg0); end
  def dispose_generic_value(*arg0); end
  def dispose_mcjit_memory_manager(*arg0); end
  def dispose_memory_buffer(*arg0); end
  def dispose_message(*arg0); end
  def dispose_module(*arg0); end
  def dispose_module_provider(*arg0); end
  def dispose_pass_manager(*arg0); end
  def dispose_target_data(*arg0); end
  def dispose_target_machine(*arg0); end
  def double_type(*arg0); end
  def double_type_in_context(*arg0); end
  def dump_module(*arg0); end
  def dump_type(*arg0); end
  def dump_value(*arg0); end
  def element_at_offset(*arg0); end
  def finalize_function_pass_manager(*arg0); end
  def find_function(*arg0); end
  def float_type(*arg0); end
  def float_type_in_context(*arg0); end
  def for_each_value_subclass(macro); end
  def fp128_type(*arg0); end
  def fp128_type_in_context(*arg0); end
  def free_machine_code_for_function(*arg0); end
  def function_type(*arg0); end
  def generic_value_int_width(*arg0); end
  def generic_value_to_float(*arg0); end
  def generic_value_to_int(*arg0); end
  def generic_value_to_pointer(*arg0); end
  def get_alignment(*arg0); end
  def get_array_length(*arg0); end
  def get_as_string(*arg0); end
  def get_attribute_count_at_index(*arg0); end
  def get_attributes_at_index(*arg0); end
  def get_basic_block_parent(*arg0); end
  def get_basic_block_terminator(*arg0); end
  def get_basic_blocks(*arg0); end
  def get_bitcode_module(*arg0); end
  def get_bitcode_module2(*arg0); end
  def get_bitcode_module_in_context(*arg0); end
  def get_bitcode_module_in_context2(*arg0); end
  def get_buffer_size(*arg0); end
  def get_buffer_start(*arg0); end
  def get_condition(*arg0); end
  def get_const_opcode(*arg0); end
  def get_current_debug_location(*arg0); end
  def get_data_layout(*arg0); end
  def get_default_target_triple(*arg0); end
  def get_diag_info_description(*arg0); end
  def get_diag_info_severity(*arg0); end
  def get_dll_storage_class(*arg0); end
  def get_element_as_constant(*arg0); end
  def get_element_type(*arg0); end
  def get_entry_basic_block(*arg0); end
  def get_enum_attribute_kind(*arg0); end
  def get_enum_attribute_kind_for_name(*arg0); end
  def get_enum_attribute_value(*arg0); end
  def get_execution_engine_target_data(*arg0); end
  def get_execution_engine_target_machine(*arg0); end
  def get_f_cmp_predicate(*arg0); end
  def get_first_basic_block(*arg0); end
  def get_first_function(*arg0); end
  def get_first_global(*arg0); end
  def get_first_instruction(*arg0); end
  def get_first_param(*arg0); end
  def get_first_target(*arg0); end
  def get_first_use(*arg0); end
  def get_function_address(*arg0); end
  def get_function_call_conv(*arg0); end
  def get_gc(*arg0); end
  def get_global_context(*arg0); end
  def get_global_parent(*arg0); end
  def get_global_pass_registry(*arg0); end
  def get_global_value_address(*arg0); end
  def get_i_cmp_predicate(*arg0); end
  def get_incoming_block(*arg0); end
  def get_incoming_value(*arg0); end
  def get_initializer(*arg0); end
  def get_insert_block(*arg0); end
  def get_instruction_call_conv(*arg0); end
  def get_instruction_opcode(*arg0); end
  def get_instruction_parent(*arg0); end
  def get_int_type_width(*arg0); end
  def get_intrinsic_id(*arg0); end
  def get_last_basic_block(*arg0); end
  def get_last_function(*arg0); end
  def get_last_global(*arg0); end
  def get_last_instruction(*arg0); end
  def get_last_param(*arg0); end
  def get_linkage(*arg0); end
  def get_md_kind_id(*arg0); end
  def get_md_kind_id_in_context(*arg0); end
  def get_md_node_num_operands(*arg0); end
  def get_md_node_operands(*arg0); end
  def get_md_string(*arg0); end
  def get_metadata(*arg0); end
  def get_module_context(*arg0); end
  def get_module_data_layout(*arg0); end
  def get_named_function(*arg0); end
  def get_named_global(*arg0); end
  def get_named_metadata_num_operands(*arg0); end
  def get_named_metadata_operands(*arg0); end
  def get_next_basic_block(*arg0); end
  def get_next_function(*arg0); end
  def get_next_global(*arg0); end
  def get_next_instruction(*arg0); end
  def get_next_param(*arg0); end
  def get_next_target(*arg0); end
  def get_next_use(*arg0); end
  def get_num_operands(*arg0); end
  def get_num_successors(*arg0); end
  def get_operand(*arg0); end
  def get_operand_use(*arg0); end
  def get_ordering(*arg0); end
  def get_param(*arg0); end
  def get_param_parent(*arg0); end
  def get_param_types(*arg0); end
  def get_params(*arg0); end
  def get_personality_fn(*arg0); end
  def get_pointer_address_space(*arg0); end
  def get_pointer_to_global(*arg0); end
  def get_previous_basic_block(*arg0); end
  def get_previous_function(*arg0); end
  def get_previous_global(*arg0); end
  def get_previous_instruction(*arg0); end
  def get_previous_param(*arg0); end
  def get_return_type(*arg0); end
  def get_section(*arg0); end
  def get_string_attribute_kind(*arg0); end
  def get_string_attribute_value(*arg0); end
  def get_struct_element_types(*arg0); end
  def get_struct_name(*arg0); end
  def get_successor(*arg0); end
  def get_switch_default_dest(*arg0); end
  def get_target(*arg0); end
  def get_target_description(*arg0); end
  def get_target_from_name(*arg0); end
  def get_target_from_triple(*arg0); end
  def get_target_machine_cpu(*arg0); end
  def get_target_machine_feature_string(*arg0); end
  def get_target_machine_target(*arg0); end
  def get_target_machine_triple(*arg0); end
  def get_target_name(*arg0); end
  def get_thread_local_mode(*arg0); end
  def get_type_by_name(*arg0); end
  def get_type_context(*arg0); end
  def get_type_kind(*arg0); end
  def get_undef(*arg0); end
  def get_used_value(*arg0); end
  def get_user(*arg0); end
  def get_value_name(*arg0); end
  def get_vector_size(*arg0); end
  def get_visibility(*arg0); end
  def get_volatile(*arg0); end
  def half_type(*arg0); end
  def half_type_in_context(*arg0); end
  def has_metadata(*arg0); end
  def has_unnamed_addr(*arg0); end
  def initialize_core(*arg0); end
  def initialize_function_pass_manager(*arg0); end
  def initialize_mcjit_compiler_options(*arg0); end
  def insert_basic_block(*arg0); end
  def insert_basic_block_in_context(*arg0); end
  def insert_into_builder(*arg0); end
  def insert_into_builder_with_name(*arg0); end
  def instruction_clone(*arg0); end
  def instruction_erase_from_parent(*arg0); end
  def int128_type(*arg0); end
  def int128_type_in_context(*arg0); end
  def int16_type(*arg0); end
  def int16_type_in_context(*arg0); end
  def int1_type(*arg0); end
  def int1_type_in_context(*arg0); end
  def int32_type(*arg0); end
  def int32_type_in_context(*arg0); end
  def int64_type(*arg0); end
  def int64_type_in_context(*arg0); end
  def int8_type(*arg0); end
  def int8_type_in_context(*arg0); end
  def int_ptr_type(*arg0); end
  def int_ptr_type_for_as(*arg0); end
  def int_ptr_type_for_as_in_context(*arg0); end
  def int_ptr_type_in_context(*arg0); end
  def int_type(*arg0); end
  def int_type_in_context(*arg0); end
  def is_a_addr_space_cast_inst(*arg0); end
  def is_a_alloca_inst(*arg0); end
  def is_a_argument(*arg0); end
  def is_a_basic_block(*arg0); end
  def is_a_binary_operator(*arg0); end
  def is_a_bit_cast_inst(*arg0); end
  def is_a_block_address(*arg0); end
  def is_a_branch_inst(*arg0); end
  def is_a_call_inst(*arg0); end
  def is_a_cast_inst(*arg0); end
  def is_a_catch_pad_inst(*arg0); end
  def is_a_catch_return_inst(*arg0); end
  def is_a_cleanup_pad_inst(*arg0); end
  def is_a_cleanup_return_inst(*arg0); end
  def is_a_cmp_inst(*arg0); end
  def is_a_constant(*arg0); end
  def is_a_constant_aggregate_zero(*arg0); end
  def is_a_constant_array(*arg0); end
  def is_a_constant_data_array(*arg0); end
  def is_a_constant_data_sequential(*arg0); end
  def is_a_constant_data_vector(*arg0); end
  def is_a_constant_expr(*arg0); end
  def is_a_constant_fp(*arg0); end
  def is_a_constant_int(*arg0); end
  def is_a_constant_pointer_null(*arg0); end
  def is_a_constant_struct(*arg0); end
  def is_a_constant_token_none(*arg0); end
  def is_a_constant_vector(*arg0); end
  def is_a_dbg_declare_inst(*arg0); end
  def is_a_dbg_info_intrinsic(*arg0); end
  def is_a_extract_element_inst(*arg0); end
  def is_a_extract_value_inst(*arg0); end
  def is_a_funclet_pad_inst(*arg0); end
  def is_a_function(*arg0); end
  def is_a_get_element_ptr_inst(*arg0); end
  def is_a_global_alias(*arg0); end
  def is_a_global_object(*arg0); end
  def is_a_global_value(*arg0); end
  def is_a_global_variable(*arg0); end
  def is_a_indirect_br_inst(*arg0); end
  def is_a_inline_asm(*arg0); end
  def is_a_insert_element_inst(*arg0); end
  def is_a_insert_value_inst(*arg0); end
  def is_a_instruction(*arg0); end
  def is_a_int_to_ptr_inst(*arg0); end
  def is_a_intrinsic_inst(*arg0); end
  def is_a_invoke_inst(*arg0); end
  def is_a_landing_pad_inst(*arg0); end
  def is_a_load_inst(*arg0); end
  def is_a_mem_cpy_inst(*arg0); end
  def is_a_mem_intrinsic(*arg0); end
  def is_a_mem_move_inst(*arg0); end
  def is_a_mem_set_inst(*arg0); end
  def is_a_ptr_to_int_inst(*arg0); end
  def is_a_resume_inst(*arg0); end
  def is_a_return_inst(*arg0); end
  def is_a_select_inst(*arg0); end
  def is_a_shuffle_vector_inst(*arg0); end
  def is_a_store_inst(*arg0); end
  def is_a_switch_inst(*arg0); end
  def is_a_terminator_inst(*arg0); end
  def is_a_trunc_inst(*arg0); end
  def is_a_unary_instruction(*arg0); end
  def is_a_undef_value(*arg0); end
  def is_a_unreachable_inst(*arg0); end
  def is_a_user(*arg0); end
  def is_af_cmp_inst(*arg0); end
  def is_afp_ext_inst(*arg0); end
  def is_afp_to_si_inst(*arg0); end
  def is_afp_to_ui_inst(*arg0); end
  def is_afp_trunc_inst(*arg0); end
  def is_ai_cmp_inst(*arg0); end
  def is_amd_node(*arg0); end
  def is_amd_string(*arg0); end
  def is_aphi_node(*arg0); end
  def is_as_ext_inst(*arg0); end
  def is_asi_to_fp_inst(*arg0); end
  def is_aui_to_fp_inst(*arg0); end
  def is_ava_arg_inst(*arg0); end
  def is_az_ext_inst(*arg0); end
  def is_conditional(*arg0); end
  def is_constant(*arg0); end
  def is_constant_string(*arg0); end
  def is_declaration(*arg0); end
  def is_externally_initialized(*arg0); end
  def is_function_var_arg(*arg0); end
  def is_global_constant(*arg0); end
  def is_multithreaded(*arg0); end
  def is_null(*arg0); end
  def is_opaque_struct(*arg0); end
  def is_packed_struct(*arg0); end
  def is_tail_call(*arg0); end
  def is_thread_local(*arg0); end
  def is_undef(*arg0); end
  def label_type(*arg0); end
  def label_type_in_context(*arg0); end
  def link_in_interpreter(*arg0); end
  def link_in_mcjit(*arg0); end
  def load_library_permanently(*arg0); end
  def md_node(*arg0); end
  def md_node_in_context(*arg0); end
  def md_string(*arg0); end
  def md_string_in_context(*arg0); end
  def module_create_with_name(*arg0); end
  def module_create_with_name_in_context(*arg0); end
  def move_basic_block_after(*arg0); end
  def move_basic_block_before(*arg0); end
  def offset_of_element(*arg0); end
  def parse_bitcode(*arg0); end
  def parse_bitcode2(*arg0); end
  def parse_bitcode_in_context(*arg0); end
  def parse_bitcode_in_context2(*arg0); end
  def parse_command_line_options(*arg0); end
  def pass_manager_builder_create(*arg0); end
  def pass_manager_builder_dispose(*arg0); end
  def pass_manager_builder_populate_function_pass_manager(*arg0); end
  def pass_manager_builder_populate_lto_pass_manager(*arg0); end
  def pass_manager_builder_populate_module_pass_manager(*arg0); end
  def pass_manager_builder_set_disable_simplify_lib_calls(*arg0); end
  def pass_manager_builder_set_disable_unit_at_a_time(*arg0); end
  def pass_manager_builder_set_disable_unroll_loops(*arg0); end
  def pass_manager_builder_set_opt_level(*arg0); end
  def pass_manager_builder_set_size_level(*arg0); end
  def pass_manager_builder_use_inliner_with_threshold(*arg0); end
  def pointer_size(*arg0); end
  def pointer_size_for_as(*arg0); end
  def pointer_type(*arg0); end
  def position_builder(*arg0); end
  def position_builder_at_end(*arg0); end
  def position_builder_before(*arg0); end
  def ppcfp128_type(*arg0); end
  def ppcfp128_type_in_context(*arg0); end
  def preferred_alignment_of_global(*arg0); end
  def preferred_alignment_of_type(*arg0); end
  def print_module_to_file(*arg0); end
  def print_module_to_string(*arg0); end
  def print_type_to_string(*arg0); end
  def print_value_to_string(*arg0); end
  def recompile_and_relink_function(*arg0); end
  def remove_basic_block_from_parent(*arg0); end
  def remove_enum_attribute_at_index(*arg0); end
  def remove_module(*arg0); end
  def replace_all_uses_with(*arg0); end
  def run_function(*arg0); end
  def run_function_as_main(*arg0); end
  def run_function_pass_manager(*arg0); end
  def run_pass_manager(*arg0); end
  def run_static_constructors(*arg0); end
  def run_static_destructors(*arg0); end
  def search_for_address_of_symbol(*arg0); end
  def self.abi_alignment_of_type(*arg0); end
  def self.abi_size_of_type(*arg0); end
  def self.add_aggressive_dce_pass(*arg0); end
  def self.add_alias(*arg0); end
  def self.add_alignment_from_assumptions_pass(*arg0); end
  def self.add_always_inliner_pass(*arg0); end
  def self.add_analysis_passes(*arg0); end
  def self.add_argument_promotion_pass(*arg0); end
  def self.add_attribute(*_); end
  def self.add_attribute_at_index(*arg0); end
  def self.add_basic_alias_analysis_pass(*arg0); end
  def self.add_bit_tracking_dce_pass(*arg0); end
  def self.add_case(*arg0); end
  def self.add_cfg_simplification_pass(*arg0); end
  def self.add_clause(*arg0); end
  def self.add_constant_merge_pass(*arg0); end
  def self.add_constant_propagation_pass(*arg0); end
  def self.add_correlated_value_propagation_pass(*arg0); end
  def self.add_dead_arg_elimination_pass(*arg0); end
  def self.add_dead_store_elimination_pass(*arg0); end
  def self.add_demote_memory_to_register_pass(*arg0); end
  def self.add_destination(*arg0); end
  def self.add_early_cse_mem_ssa_pass(*arg0); end
  def self.add_early_cse_pass(*arg0); end
  def self.add_function(*arg0); end
  def self.add_function_attr(*_); end
  def self.add_function_attrs_pass(*arg0); end
  def self.add_function_inlining_pass(*arg0); end
  def self.add_global(*arg0); end
  def self.add_global_dce_pass(*arg0); end
  def self.add_global_in_address_space(*arg0); end
  def self.add_global_mapping(*arg0); end
  def self.add_global_optimizer_pass(*arg0); end
  def self.add_gvn_pass(*arg0); end
  def self.add_incoming(*arg0); end
  def self.add_ind_var_simplify_pass(*arg0); end
  def self.add_instr_attribute(*_); end
  def self.add_instruction_combining_pass(*arg0); end
  def self.add_internalize_pass(*arg0); end
  def self.add_ip_constant_propagation_pass(*arg0); end
  def self.add_ipsccp_pass(*arg0); end
  def self.add_jump_threading_pass(*arg0); end
  def self.add_late_cfg_simplification_pass(*_); end
  def self.add_licm_pass(*arg0); end
  def self.add_loop_deletion_pass(*arg0); end
  def self.add_loop_idiom_pass(*arg0); end
  def self.add_loop_reroll_pass(*arg0); end
  def self.add_loop_rotate_pass(*arg0); end
  def self.add_loop_unroll_pass(*arg0); end
  def self.add_loop_unswitch_pass(*arg0); end
  def self.add_lower_expect_intrinsic_pass(*arg0); end
  def self.add_lower_switch_pass(*arg0); end
  def self.add_mem_cpy_opt_pass(*arg0); end
  def self.add_merged_load_store_motion_pass(*arg0); end
  def self.add_module(*arg0); end
  def self.add_named_metadata_operand(*arg0); end
  def self.add_new_gvn_pass(*arg0); end
  def self.add_partially_inline_lib_calls_pass(*arg0); end
  def self.add_promote_memory_to_register_pass(*arg0); end
  def self.add_prune_eh_pass(*arg0); end
  def self.add_reassociate_pass(*arg0); end
  def self.add_scalar_repl_aggregates_pass(*arg0); end
  def self.add_scalar_repl_aggregates_pass_ssa(*arg0); end
  def self.add_scalar_repl_aggregates_pass_with_threshold(*arg0); end
  def self.add_scalarizer_pass(*arg0); end
  def self.add_sccp_pass(*arg0); end
  def self.add_scoped_no_alias_aa_pass(*arg0); end
  def self.add_simplify_lib_calls_pass(*arg0); end
  def self.add_strip_dead_prototypes_pass(*arg0); end
  def self.add_strip_symbols_pass(*arg0); end
  def self.add_symbol(*arg0); end
  def self.add_tail_call_elimination_pass(*arg0); end
  def self.add_target_dependent_function_attr(*arg0); end
  def self.add_target_library_info(*arg0); end
  def self.add_type_based_alias_analysis_pass(*arg0); end
  def self.add_verifier_pass(*arg0); end
  def self.align_of(*arg0); end
  def self.append_basic_block(*arg0); end
  def self.append_basic_block_in_context(*arg0); end
  def self.array_type(*arg0); end
  def self.attach_function(name, *_); end
  def self.basic_block_as_value(*arg0); end
  def self.block_address(*arg0); end
  def self.build_a_shr(*arg0); end
  def self.build_add(*arg0); end
  def self.build_addr_space_cast(*arg0); end
  def self.build_aggregate_ret(*arg0); end
  def self.build_alloca(*arg0); end
  def self.build_and(*arg0); end
  def self.build_array_alloca(*arg0); end
  def self.build_array_malloc(*arg0); end
  def self.build_atomic_rmw(*arg0); end
  def self.build_bin_op(*arg0); end
  def self.build_bit_cast(*arg0); end
  def self.build_br(*arg0); end
  def self.build_call(*arg0); end
  def self.build_cast(*arg0); end
  def self.build_cond_br(*arg0); end
  def self.build_exact_s_div(*arg0); end
  def self.build_extract_element(*arg0); end
  def self.build_extract_value(*arg0); end
  def self.build_f_add(*arg0); end
  def self.build_f_cmp(*arg0); end
  def self.build_f_div(*arg0); end
  def self.build_f_mul(*arg0); end
  def self.build_f_neg(*arg0); end
  def self.build_f_rem(*arg0); end
  def self.build_f_sub(*arg0); end
  def self.build_fence(*arg0); end
  def self.build_fp_cast(*arg0); end
  def self.build_fp_ext(*arg0); end
  def self.build_fp_to_si(*arg0); end
  def self.build_fp_to_ui(*arg0); end
  def self.build_fp_trunc(*arg0); end
  def self.build_free(*arg0); end
  def self.build_gep(*arg0); end
  def self.build_global_string(*arg0); end
  def self.build_global_string_ptr(*arg0); end
  def self.build_i_cmp(*arg0); end
  def self.build_in_bounds_gep(*arg0); end
  def self.build_indirect_br(*arg0); end
  def self.build_insert_element(*arg0); end
  def self.build_insert_value(*arg0); end
  def self.build_int_cast(*arg0); end
  def self.build_int_to_ptr(*arg0); end
  def self.build_invoke(*arg0); end
  def self.build_is_not_null(*arg0); end
  def self.build_is_null(*arg0); end
  def self.build_l_shr(*arg0); end
  def self.build_landing_pad(*arg0); end
  def self.build_load(*arg0); end
  def self.build_malloc(*arg0); end
  def self.build_mul(*arg0); end
  def self.build_neg(*arg0); end
  def self.build_not(*arg0); end
  def self.build_nsw_add(*arg0); end
  def self.build_nsw_mul(*arg0); end
  def self.build_nsw_neg(*arg0); end
  def self.build_nsw_sub(*arg0); end
  def self.build_nuw_add(*arg0); end
  def self.build_nuw_mul(*arg0); end
  def self.build_nuw_neg(*arg0); end
  def self.build_nuw_sub(*arg0); end
  def self.build_or(*arg0); end
  def self.build_phi(*arg0); end
  def self.build_pointer_cast(*arg0); end
  def self.build_ptr_diff(*arg0); end
  def self.build_ptr_to_int(*arg0); end
  def self.build_resume(*arg0); end
  def self.build_ret(*arg0); end
  def self.build_ret_void(*arg0); end
  def self.build_s_div(*arg0); end
  def self.build_s_ext(*arg0); end
  def self.build_s_ext_or_bit_cast(*arg0); end
  def self.build_s_rem(*arg0); end
  def self.build_select(*arg0); end
  def self.build_shl(*arg0); end
  def self.build_shuffle_vector(*arg0); end
  def self.build_si_to_fp(*arg0); end
  def self.build_store(*arg0); end
  def self.build_struct_gep(*arg0); end
  def self.build_sub(*arg0); end
  def self.build_switch(*arg0); end
  def self.build_trunc(*arg0); end
  def self.build_trunc_or_bit_cast(*arg0); end
  def self.build_u_div(*arg0); end
  def self.build_u_rem(*arg0); end
  def self.build_ui_to_fp(*arg0); end
  def self.build_unreachable(*arg0); end
  def self.build_va_arg(*arg0); end
  def self.build_xor(*arg0); end
  def self.build_z_ext(*arg0); end
  def self.build_z_ext_or_bit_cast(*arg0); end
  def self.byte_order(*arg0); end
  def self.call_frame_alignment_of_type(*arg0); end
  def self.clear_insertion_position(*arg0); end
  def self.clone_module(*arg0); end
  def self.const_a_shr(*arg0); end
  def self.const_add(*arg0); end
  def self.const_addr_space_cast(*arg0); end
  def self.const_all_ones(*arg0); end
  def self.const_and(*arg0); end
  def self.const_array(*arg0); end
  def self.const_bit_cast(*arg0); end
  def self.const_exact_s_div(*arg0); end
  def self.const_extract_element(*arg0); end
  def self.const_extract_value(*arg0); end
  def self.const_f_add(*arg0); end
  def self.const_f_cmp(*arg0); end
  def self.const_f_div(*arg0); end
  def self.const_f_mul(*arg0); end
  def self.const_f_neg(*arg0); end
  def self.const_f_rem(*arg0); end
  def self.const_f_sub(*arg0); end
  def self.const_fp_cast(*arg0); end
  def self.const_fp_ext(*arg0); end
  def self.const_fp_to_si(*arg0); end
  def self.const_fp_to_ui(*arg0); end
  def self.const_fp_trunc(*arg0); end
  def self.const_gep(*arg0); end
  def self.const_i_cmp(*arg0); end
  def self.const_in_bounds_gep(*arg0); end
  def self.const_inline_asm(*arg0); end
  def self.const_insert_element(*arg0); end
  def self.const_insert_value(*arg0); end
  def self.const_int(*arg0); end
  def self.const_int_cast(*arg0); end
  def self.const_int_get_s_ext_value(*arg0); end
  def self.const_int_get_z_ext_value(*arg0); end
  def self.const_int_of_arbitrary_precision(*arg0); end
  def self.const_int_of_string(*arg0); end
  def self.const_int_of_string_and_size(*arg0); end
  def self.const_int_to_ptr(*arg0); end
  def self.const_l_shr(*arg0); end
  def self.const_mul(*arg0); end
  def self.const_named_struct(*arg0); end
  def self.const_neg(*arg0); end
  def self.const_not(*arg0); end
  def self.const_nsw_add(*arg0); end
  def self.const_nsw_mul(*arg0); end
  def self.const_nsw_neg(*arg0); end
  def self.const_nsw_sub(*arg0); end
  def self.const_null(*arg0); end
  def self.const_nuw_add(*arg0); end
  def self.const_nuw_mul(*arg0); end
  def self.const_nuw_neg(*arg0); end
  def self.const_nuw_sub(*arg0); end
  def self.const_or(*arg0); end
  def self.const_pointer_cast(*arg0); end
  def self.const_pointer_null(*arg0); end
  def self.const_ptr_to_int(*arg0); end
  def self.const_real(*arg0); end
  def self.const_real_get_double(*arg0); end
  def self.const_real_of_string(*arg0); end
  def self.const_real_of_string_and_size(*arg0); end
  def self.const_s_div(*arg0); end
  def self.const_s_ext(*arg0); end
  def self.const_s_ext_or_bit_cast(*arg0); end
  def self.const_s_rem(*arg0); end
  def self.const_select(*arg0); end
  def self.const_shl(*arg0); end
  def self.const_shuffle_vector(*arg0); end
  def self.const_si_to_fp(*arg0); end
  def self.const_string(*arg0); end
  def self.const_string_in_context(*arg0); end
  def self.const_struct(*arg0); end
  def self.const_struct_in_context(*arg0); end
  def self.const_sub(*arg0); end
  def self.const_trunc(*arg0); end
  def self.const_trunc_or_bit_cast(*arg0); end
  def self.const_u_div(*arg0); end
  def self.const_u_rem(*arg0); end
  def self.const_ui_to_fp(*arg0); end
  def self.const_vector(*arg0); end
  def self.const_xor(*arg0); end
  def self.const_z_ext(*arg0); end
  def self.const_z_ext_or_bit_cast(*arg0); end
  def self.context_create(*arg0); end
  def self.context_dispose(*arg0); end
  def self.context_set_diagnostic_handler(*arg0); end
  def self.context_set_yield_callback(*arg0); end
  def self.copy_string_rep_of_target_data(*arg0); end
  def self.count_basic_blocks(*arg0); end
  def self.count_incoming(*arg0); end
  def self.count_param_types(*arg0); end
  def self.count_params(*arg0); end
  def self.count_struct_element_types(*arg0); end
  def self.create_builder(*arg0); end
  def self.create_builder_in_context(*arg0); end
  def self.create_enum_attribute(*arg0); end
  def self.create_execution_engine_for_module(*arg0); end
  def self.create_function_pass_manager(*arg0); end
  def self.create_function_pass_manager_for_module(*arg0); end
  def self.create_generic_value_of_float(*arg0); end
  def self.create_generic_value_of_int(*arg0); end
  def self.create_generic_value_of_pointer(*arg0); end
  def self.create_interpreter_for_module(*arg0); end
  def self.create_jit_compiler_for_module(*arg0); end
  def self.create_mcjit_compiler_for_module(*arg0); end
  def self.create_memory_buffer_with_contents_of_file(*arg0); end
  def self.create_memory_buffer_with_memory_range(*arg0); end
  def self.create_memory_buffer_with_memory_range_copy(*arg0); end
  def self.create_memory_buffer_with_stdin(*arg0); end
  def self.create_message(*arg0); end
  def self.create_module_provider_for_existing_module(*arg0); end
  def self.create_pass_manager(*arg0); end
  def self.create_simple_mcjit_memory_manager(*arg0); end
  def self.create_target_data(*arg0); end
  def self.create_target_data_layout(*arg0); end
  def self.create_target_machine(*arg0); end
  def self.delete_basic_block(*arg0); end
  def self.delete_function(*arg0); end
  def self.delete_global(*arg0); end
  def self.dispose_builder(*arg0); end
  def self.dispose_execution_engine(*arg0); end
  def self.dispose_generic_value(*arg0); end
  def self.dispose_mcjit_memory_manager(*arg0); end
  def self.dispose_memory_buffer(*arg0); end
  def self.dispose_message(*arg0); end
  def self.dispose_module(*arg0); end
  def self.dispose_module_provider(*arg0); end
  def self.dispose_pass_manager(*arg0); end
  def self.dispose_target_data(*arg0); end
  def self.dispose_target_machine(*arg0); end
  def self.double_type(*arg0); end
  def self.double_type_in_context(*arg0); end
  def self.dump_module(*arg0); end
  def self.dump_type(*arg0); end
  def self.dump_value(*arg0); end
  def self.element_at_offset(*arg0); end
  def self.finalize_function_pass_manager(*arg0); end
  def self.find_function(*arg0); end
  def self.float_type(*arg0); end
  def self.float_type_in_context(*arg0); end
  def self.fp128_type(*arg0); end
  def self.fp128_type_in_context(*arg0); end
  def self.free_machine_code_for_function(*arg0); end
  def self.function_type(*arg0); end
  def self.generic_value_int_width(*arg0); end
  def self.generic_value_to_float(*arg0); end
  def self.generic_value_to_int(*arg0); end
  def self.generic_value_to_pointer(*arg0); end
  def self.get_alignment(*arg0); end
  def self.get_array_length(*arg0); end
  def self.get_as_string(*arg0); end
  def self.get_attribute(*_); end
  def self.get_attribute_count_at_index(*arg0); end
  def self.get_attributes_at_index(*arg0); end
  def self.get_basic_block_parent(*arg0); end
  def self.get_basic_block_terminator(*arg0); end
  def self.get_basic_blocks(*arg0); end
  def self.get_bitcode_module(*arg0); end
  def self.get_bitcode_module2(*arg0); end
  def self.get_bitcode_module_in_context(*arg0); end
  def self.get_bitcode_module_in_context2(*arg0); end
  def self.get_buffer_size(*arg0); end
  def self.get_buffer_start(*arg0); end
  def self.get_condition(*arg0); end
  def self.get_const_opcode(*arg0); end
  def self.get_current_debug_location(*arg0); end
  def self.get_data_layout(*arg0); end
  def self.get_default_target_triple(*arg0); end
  def self.get_diag_info_description(*arg0); end
  def self.get_diag_info_severity(*arg0); end
  def self.get_dll_storage_class(*arg0); end
  def self.get_element_as_constant(*arg0); end
  def self.get_element_type(*arg0); end
  def self.get_entry_basic_block(*arg0); end
  def self.get_enum_attribute_kind(*arg0); end
  def self.get_enum_attribute_kind_for_name(*arg0); end
  def self.get_enum_attribute_value(*arg0); end
  def self.get_execution_engine_target_data(*arg0); end
  def self.get_execution_engine_target_machine(*arg0); end
  def self.get_f_cmp_predicate(*arg0); end
  def self.get_first_basic_block(*arg0); end
  def self.get_first_function(*arg0); end
  def self.get_first_global(*arg0); end
  def self.get_first_instruction(*arg0); end
  def self.get_first_param(*arg0); end
  def self.get_first_target(*arg0); end
  def self.get_first_use(*arg0); end
  def self.get_function_address(*arg0); end
  def self.get_function_attr(*_); end
  def self.get_function_call_conv(*arg0); end
  def self.get_gc(*arg0); end
  def self.get_global_context(*arg0); end
  def self.get_global_parent(*arg0); end
  def self.get_global_pass_registry(*arg0); end
  def self.get_global_value_address(*arg0); end
  def self.get_i_cmp_predicate(*arg0); end
  def self.get_incoming_block(*arg0); end
  def self.get_incoming_value(*arg0); end
  def self.get_initializer(*arg0); end
  def self.get_insert_block(*arg0); end
  def self.get_instruction_call_conv(*arg0); end
  def self.get_instruction_opcode(*arg0); end
  def self.get_instruction_parent(*arg0); end
  def self.get_int_type_width(*arg0); end
  def self.get_intrinsic_id(*arg0); end
  def self.get_last_basic_block(*arg0); end
  def self.get_last_function(*arg0); end
  def self.get_last_global(*arg0); end
  def self.get_last_instruction(*arg0); end
  def self.get_last_param(*arg0); end
  def self.get_linkage(*arg0); end
  def self.get_md_kind_id(*arg0); end
  def self.get_md_kind_id_in_context(*arg0); end
  def self.get_md_node_num_operands(*arg0); end
  def self.get_md_node_operands(*arg0); end
  def self.get_md_string(*arg0); end
  def self.get_metadata(*arg0); end
  def self.get_module_context(*arg0); end
  def self.get_module_data_layout(*arg0); end
  def self.get_named_function(*arg0); end
  def self.get_named_global(*arg0); end
  def self.get_named_metadata_num_operands(*arg0); end
  def self.get_named_metadata_operands(*arg0); end
  def self.get_next_basic_block(*arg0); end
  def self.get_next_function(*arg0); end
  def self.get_next_global(*arg0); end
  def self.get_next_instruction(*arg0); end
  def self.get_next_param(*arg0); end
  def self.get_next_target(*arg0); end
  def self.get_next_use(*arg0); end
  def self.get_num_operands(*arg0); end
  def self.get_num_successors(*arg0); end
  def self.get_operand(*arg0); end
  def self.get_operand_use(*arg0); end
  def self.get_ordering(*arg0); end
  def self.get_param(*arg0); end
  def self.get_param_parent(*arg0); end
  def self.get_param_types(*arg0); end
  def self.get_params(*arg0); end
  def self.get_personality_fn(*arg0); end
  def self.get_pointer_address_space(*arg0); end
  def self.get_pointer_to_global(*arg0); end
  def self.get_previous_basic_block(*arg0); end
  def self.get_previous_function(*arg0); end
  def self.get_previous_global(*arg0); end
  def self.get_previous_instruction(*arg0); end
  def self.get_previous_param(*arg0); end
  def self.get_return_type(*arg0); end
  def self.get_section(*arg0); end
  def self.get_string_attribute_kind(*arg0); end
  def self.get_string_attribute_value(*arg0); end
  def self.get_struct_element_types(*arg0); end
  def self.get_struct_name(*arg0); end
  def self.get_successor(*arg0); end
  def self.get_switch_default_dest(*arg0); end
  def self.get_target(*arg0); end
  def self.get_target_description(*arg0); end
  def self.get_target_from_name(*arg0); end
  def self.get_target_from_triple(*arg0); end
  def self.get_target_machine_cpu(*arg0); end
  def self.get_target_machine_feature_string(*arg0); end
  def self.get_target_machine_target(*arg0); end
  def self.get_target_machine_triple(*arg0); end
  def self.get_target_name(*arg0); end
  def self.get_thread_local_mode(*arg0); end
  def self.get_type_by_name(*arg0); end
  def self.get_type_context(*arg0); end
  def self.get_type_kind(*arg0); end
  def self.get_undef(*arg0); end
  def self.get_used_value(*arg0); end
  def self.get_user(*arg0); end
  def self.get_value_name(*arg0); end
  def self.get_vector_size(*arg0); end
  def self.get_visibility(*arg0); end
  def self.get_volatile(*arg0); end
  def self.half_type(*arg0); end
  def self.half_type_in_context(*arg0); end
  def self.has_metadata(*arg0); end
  def self.has_unnamed_addr(*arg0); end
  def self.initialize_all_asm_parsers(*_); end
  def self.initialize_all_asm_printers(*_); end
  def self.initialize_all_disassemblers(*_); end
  def self.initialize_all_target_infos(*_); end
  def self.initialize_all_target_m_cs(*_); end
  def self.initialize_all_targets(*_); end
  def self.initialize_core(*arg0); end
  def self.initialize_function_pass_manager(*arg0); end
  def self.initialize_mcjit_compiler_options(*arg0); end
  def self.initialize_native_asm_parser(*_); end
  def self.initialize_native_asm_printer(*_); end
  def self.initialize_native_disassembler(*_); end
  def self.initialize_native_target(*_); end
  def self.insert_basic_block(*arg0); end
  def self.insert_basic_block_in_context(*arg0); end
  def self.insert_into_builder(*arg0); end
  def self.insert_into_builder_with_name(*arg0); end
  def self.instruction_clone(*arg0); end
  def self.instruction_erase_from_parent(*arg0); end
  def self.int128_type(*arg0); end
  def self.int128_type_in_context(*arg0); end
  def self.int16_type(*arg0); end
  def self.int16_type_in_context(*arg0); end
  def self.int1_type(*arg0); end
  def self.int1_type_in_context(*arg0); end
  def self.int32_type(*arg0); end
  def self.int32_type_in_context(*arg0); end
  def self.int64_type(*arg0); end
  def self.int64_type_in_context(*arg0); end
  def self.int8_type(*arg0); end
  def self.int8_type_in_context(*arg0); end
  def self.int_ptr_type(*arg0); end
  def self.int_ptr_type_for_as(*arg0); end
  def self.int_ptr_type_for_as_in_context(*arg0); end
  def self.int_ptr_type_in_context(*arg0); end
  def self.int_type(*arg0); end
  def self.int_type_in_context(*arg0); end
  def self.is_a_addr_space_cast_inst(*arg0); end
  def self.is_a_alloca_inst(*arg0); end
  def self.is_a_argument(*arg0); end
  def self.is_a_basic_block(*arg0); end
  def self.is_a_binary_operator(*arg0); end
  def self.is_a_bit_cast_inst(*arg0); end
  def self.is_a_block_address(*arg0); end
  def self.is_a_branch_inst(*arg0); end
  def self.is_a_call_inst(*arg0); end
  def self.is_a_cast_inst(*arg0); end
  def self.is_a_catch_pad_inst(*arg0); end
  def self.is_a_catch_return_inst(*arg0); end
  def self.is_a_cleanup_pad_inst(*arg0); end
  def self.is_a_cleanup_return_inst(*arg0); end
  def self.is_a_cmp_inst(*arg0); end
  def self.is_a_constant(*arg0); end
  def self.is_a_constant_aggregate_zero(*arg0); end
  def self.is_a_constant_array(*arg0); end
  def self.is_a_constant_data_array(*arg0); end
  def self.is_a_constant_data_sequential(*arg0); end
  def self.is_a_constant_data_vector(*arg0); end
  def self.is_a_constant_expr(*arg0); end
  def self.is_a_constant_fp(*arg0); end
  def self.is_a_constant_int(*arg0); end
  def self.is_a_constant_pointer_null(*arg0); end
  def self.is_a_constant_struct(*arg0); end
  def self.is_a_constant_token_none(*arg0); end
  def self.is_a_constant_vector(*arg0); end
  def self.is_a_dbg_declare_inst(*arg0); end
  def self.is_a_dbg_info_intrinsic(*arg0); end
  def self.is_a_extract_element_inst(*arg0); end
  def self.is_a_extract_value_inst(*arg0); end
  def self.is_a_funclet_pad_inst(*arg0); end
  def self.is_a_function(*arg0); end
  def self.is_a_get_element_ptr_inst(*arg0); end
  def self.is_a_global_alias(*arg0); end
  def self.is_a_global_object(*arg0); end
  def self.is_a_global_value(*arg0); end
  def self.is_a_global_variable(*arg0); end
  def self.is_a_indirect_br_inst(*arg0); end
  def self.is_a_inline_asm(*arg0); end
  def self.is_a_insert_element_inst(*arg0); end
  def self.is_a_insert_value_inst(*arg0); end
  def self.is_a_instruction(*arg0); end
  def self.is_a_int_to_ptr_inst(*arg0); end
  def self.is_a_intrinsic_inst(*arg0); end
  def self.is_a_invoke_inst(*arg0); end
  def self.is_a_landing_pad_inst(*arg0); end
  def self.is_a_load_inst(*arg0); end
  def self.is_a_mem_cpy_inst(*arg0); end
  def self.is_a_mem_intrinsic(*arg0); end
  def self.is_a_mem_move_inst(*arg0); end
  def self.is_a_mem_set_inst(*arg0); end
  def self.is_a_ptr_to_int_inst(*arg0); end
  def self.is_a_resume_inst(*arg0); end
  def self.is_a_return_inst(*arg0); end
  def self.is_a_select_inst(*arg0); end
  def self.is_a_shuffle_vector_inst(*arg0); end
  def self.is_a_store_inst(*arg0); end
  def self.is_a_switch_inst(*arg0); end
  def self.is_a_terminator_inst(*arg0); end
  def self.is_a_trunc_inst(*arg0); end
  def self.is_a_unary_instruction(*arg0); end
  def self.is_a_undef_value(*arg0); end
  def self.is_a_unreachable_inst(*arg0); end
  def self.is_a_user(*arg0); end
  def self.is_af_cmp_inst(*arg0); end
  def self.is_afp_ext_inst(*arg0); end
  def self.is_afp_to_si_inst(*arg0); end
  def self.is_afp_to_ui_inst(*arg0); end
  def self.is_afp_trunc_inst(*arg0); end
  def self.is_ai_cmp_inst(*arg0); end
  def self.is_amd_node(*arg0); end
  def self.is_amd_string(*arg0); end
  def self.is_aphi_node(*arg0); end
  def self.is_as_ext_inst(*arg0); end
  def self.is_asi_to_fp_inst(*arg0); end
  def self.is_aui_to_fp_inst(*arg0); end
  def self.is_ava_arg_inst(*arg0); end
  def self.is_az_ext_inst(*arg0); end
  def self.is_conditional(*arg0); end
  def self.is_constant(*arg0); end
  def self.is_constant_string(*arg0); end
  def self.is_declaration(*arg0); end
  def self.is_externally_initialized(*arg0); end
  def self.is_function_var_arg(*arg0); end
  def self.is_global_constant(*arg0); end
  def self.is_multithreaded(*arg0); end
  def self.is_null(*arg0); end
  def self.is_opaque_struct(*arg0); end
  def self.is_packed_struct(*arg0); end
  def self.is_tail_call(*arg0); end
  def self.is_thread_local(*arg0); end
  def self.is_undef(*arg0); end
  def self.label_type(*arg0); end
  def self.label_type_in_context(*arg0); end
  def self.link_in_interpreter(*arg0); end
  def self.link_in_mcjit(*arg0); end
  def self.load_library_permanently(*arg0); end
  def self.md_node(*arg0); end
  def self.md_node_in_context(*arg0); end
  def self.md_string(*arg0); end
  def self.md_string_in_context(*arg0); end
  def self.module_create_with_name(*arg0); end
  def self.module_create_with_name_in_context(*arg0); end
  def self.move_basic_block_after(*arg0); end
  def self.move_basic_block_before(*arg0); end
  def self.offset_of_element(*arg0); end
  def self.parse_bitcode(*arg0); end
  def self.parse_bitcode2(*arg0); end
  def self.parse_bitcode_in_context(*arg0); end
  def self.parse_bitcode_in_context2(*arg0); end
  def self.parse_command_line_options(*arg0); end
  def self.pass_manager_builder_create(*arg0); end
  def self.pass_manager_builder_dispose(*arg0); end
  def self.pass_manager_builder_populate_function_pass_manager(*arg0); end
  def self.pass_manager_builder_populate_lto_pass_manager(*arg0); end
  def self.pass_manager_builder_populate_module_pass_manager(*arg0); end
  def self.pass_manager_builder_set_disable_simplify_lib_calls(*arg0); end
  def self.pass_manager_builder_set_disable_unit_at_a_time(*arg0); end
  def self.pass_manager_builder_set_disable_unroll_loops(*arg0); end
  def self.pass_manager_builder_set_opt_level(*arg0); end
  def self.pass_manager_builder_set_size_level(*arg0); end
  def self.pass_manager_builder_use_inliner_with_threshold(*arg0); end
  def self.pointer_size(*arg0); end
  def self.pointer_size_for_as(*arg0); end
  def self.pointer_type(*arg0); end
  def self.position_builder(*arg0); end
  def self.position_builder_at_end(*arg0); end
  def self.position_builder_before(*arg0); end
  def self.ppcfp128_type(*arg0); end
  def self.ppcfp128_type_in_context(*arg0); end
  def self.preferred_alignment_of_global(*arg0); end
  def self.preferred_alignment_of_type(*arg0); end
  def self.print_module_to_file(*arg0); end
  def self.print_module_to_string(*arg0); end
  def self.print_type_to_string(*arg0); end
  def self.print_value_to_string(*arg0); end
  def self.recompile_and_relink_function(*arg0); end
  def self.remove_attribute(*_); end
  def self.remove_basic_block_from_parent(*arg0); end
  def self.remove_enum_attribute_at_index(*arg0); end
  def self.remove_function_attr(*_); end
  def self.remove_instr_attribute(*_); end
  def self.remove_module(*arg0); end
  def self.replace_all_uses_with(*arg0); end
  def self.run_function(*arg0); end
  def self.run_function_as_main(*arg0); end
  def self.run_function_pass_manager(*arg0); end
  def self.run_pass_manager(*arg0); end
  def self.run_static_constructors(*arg0); end
  def self.run_static_destructors(*arg0); end
  def self.search_for_address_of_symbol(*arg0); end
  def self.set_alignment(*arg0); end
  def self.set_cleanup(*arg0); end
  def self.set_condition(*arg0); end
  def self.set_current_debug_location(*arg0); end
  def self.set_data_layout(*arg0); end
  def self.set_dll_storage_class(*arg0); end
  def self.set_externally_initialized(*arg0); end
  def self.set_function_call_conv(*arg0); end
  def self.set_gc(*arg0); end
  def self.set_global_constant(*arg0); end
  def self.set_initializer(*arg0); end
  def self.set_inst_debug_location(*arg0); end
  def self.set_instr_param_alignment(*arg0); end
  def self.set_instruction_call_conv(*arg0); end
  def self.set_linkage(*arg0); end
  def self.set_metadata(*arg0); end
  def self.set_module_data_layout(*arg0); end
  def self.set_module_inline_asm(*arg0); end
  def self.set_operand(*arg0); end
  def self.set_ordering(*arg0); end
  def self.set_param_alignment(*arg0); end
  def self.set_personality_fn(*arg0); end
  def self.set_section(*arg0); end
  def self.set_successor(*arg0); end
  def self.set_tail_call(*arg0); end
  def self.set_target(*arg0); end
  def self.set_target_machine_asm_verbosity(*arg0); end
  def self.set_thread_local(*arg0); end
  def self.set_thread_local_mode(*arg0); end
  def self.set_unnamed_addr(*arg0); end
  def self.set_value_name(*arg0); end
  def self.set_visibility(*arg0); end
  def self.set_volatile(*arg0); end
  def self.shutdown(*arg0); end
  def self.size_of(*arg0); end
  def self.size_of_type_in_bits(*arg0); end
  def self.start_multithreaded(*arg0); end
  def self.stop_multithreaded(*arg0); end
  def self.store_size_of_type(*arg0); end
  def self.struct_create_named(*arg0); end
  def self.struct_get_type_at_index(*arg0); end
  def self.struct_set_body(*arg0); end
  def self.struct_type(*arg0); end
  def self.struct_type_in_context(*arg0); end
  def self.target_has_asm_backend(*arg0); end
  def self.target_has_jit(*arg0); end
  def self.target_has_target_machine(*arg0); end
  def self.target_machine_emit_to_file(*arg0); end
  def self.target_machine_emit_to_memory_buffer(*arg0); end
  def self.type_is_sized(*arg0); end
  def self.type_of(*arg0); end
  def self.value_as_basic_block(*arg0); end
  def self.value_is_basic_block(*arg0); end
  def self.vector_type(*arg0); end
  def self.verify_function(*arg0); end
  def self.verify_module(*arg0); end
  def self.view_function_cfg(*arg0); end
  def self.view_function_cfg_only(*arg0); end
  def self.void_type(*arg0); end
  def self.void_type_in_context(*arg0); end
  def self.write_bitcode_to_fd(*arg0); end
  def self.write_bitcode_to_file(*arg0); end
  def self.write_bitcode_to_file_handle(*arg0); end
  def self.write_bitcode_to_memory_buffer(*arg0); end
  def self.x86fp80_type(*arg0); end
  def self.x86fp80_type_in_context(*arg0); end
  def self.x86mmx_type(*arg0); end
  def self.x86mmx_type_in_context(*arg0); end
  def set_alignment(*arg0); end
  def set_cleanup(*arg0); end
  def set_condition(*arg0); end
  def set_current_debug_location(*arg0); end
  def set_data_layout(*arg0); end
  def set_dll_storage_class(*arg0); end
  def set_externally_initialized(*arg0); end
  def set_function_call_conv(*arg0); end
  def set_gc(*arg0); end
  def set_global_constant(*arg0); end
  def set_initializer(*arg0); end
  def set_inst_debug_location(*arg0); end
  def set_instr_param_alignment(*arg0); end
  def set_instruction_call_conv(*arg0); end
  def set_linkage(*arg0); end
  def set_metadata(*arg0); end
  def set_module_data_layout(*arg0); end
  def set_module_inline_asm(*arg0); end
  def set_operand(*arg0); end
  def set_ordering(*arg0); end
  def set_param_alignment(*arg0); end
  def set_personality_fn(*arg0); end
  def set_section(*arg0); end
  def set_successor(*arg0); end
  def set_tail_call(*arg0); end
  def set_target(*arg0); end
  def set_target_machine_asm_verbosity(*arg0); end
  def set_thread_local(*arg0); end
  def set_thread_local_mode(*arg0); end
  def set_unnamed_addr(*arg0); end
  def set_value_name(*arg0); end
  def set_visibility(*arg0); end
  def set_volatile(*arg0); end
  def shutdown(*arg0); end
  def size_of(*arg0); end
  def size_of_type_in_bits(*arg0); end
  def start_multithreaded(*arg0); end
  def stop_multithreaded(*arg0); end
  def store_size_of_type(*arg0); end
  def struct_create_named(*arg0); end
  def struct_get_type_at_index(*arg0); end
  def struct_set_body(*arg0); end
  def struct_type(*arg0); end
  def struct_type_in_context(*arg0); end
  def target_has_asm_backend(*arg0); end
  def target_has_jit(*arg0); end
  def target_has_target_machine(*arg0); end
  def target_machine_emit_to_file(*arg0); end
  def target_machine_emit_to_memory_buffer(*arg0); end
  def type_is_sized(*arg0); end
  def type_of(*arg0); end
  def value_as_basic_block(*arg0); end
  def value_is_basic_block(*arg0); end
  def vector_type(*arg0); end
  def verify_function(*arg0); end
  def verify_module(*arg0); end
  def view_function_cfg(*arg0); end
  def view_function_cfg_only(*arg0); end
  def void_type(*arg0); end
  def void_type_in_context(*arg0); end
  def write_bitcode_to_fd(*arg0); end
  def write_bitcode_to_file(*arg0); end
  def write_bitcode_to_file_handle(*arg0); end
  def write_bitcode_to_memory_buffer(*arg0); end
  def x86fp80_type(*arg0); end
  def x86fp80_type_in_context(*arg0); end
  def x86mmx_type(*arg0); end
  def x86mmx_type_in_context(*arg0); end
  extend FFI::Library
  extend FFI::Library
  extend FFI::Library
  extend FFI::Library
  extend FFI::Library
  extend FFI::Library
  extend FFI::Library
  extend FFI::Library
end
module LLVM::Support
  def allocate_pointers(size_or_values, &block); end
  def self.allocate_pointers(size_or_values, &block); end
end
module LLVM::Support::C
  def initialize_all_asm_printers(*arg0); end
  def initialize_all_target_infos(*arg0); end
  def initialize_all_target_mcs(*arg0); end
  def initialize_all_targets(*arg0); end
  def initialize_native_asm_printer(*arg0); end
  def initialize_native_target(*arg0); end
  def self.initialize_all_asm_printers(*arg0); end
  def self.initialize_all_target_infos(*arg0); end
  def self.initialize_all_target_mcs(*arg0); end
  def self.initialize_all_targets(*arg0); end
  def self.initialize_native_asm_printer(*arg0); end
  def self.initialize_native_target(*arg0); end
  extend FFI::Library
end
module LLVM::PointerIdentity
  def ==(other); end
  def eql?(other); end
  def hash; end
  def to_ptr; end
end
class LLVM::Context
  def dispose; end
  def initialize(ptr = nil); end
  def self.global; end
  def to_ptr; end
end
class LLVM::Module
  def data_layout; end
  def data_layout=(data_layout); end
  def dispose; end
  def do_verification(action); end
  def dump; end
  def functions; end
  def globals; end
  def initialize(name); end
  def self.from_ptr(ptr); end
  def self.parse_bitcode(path_or_memory_buffer); end
  def to_s; end
  def triple; end
  def triple=(triple); end
  def types; end
  def verify!; end
  def verify; end
  def write_bitcode(path_or_io); end
  include LLVM::PointerIdentity
end
class LLVM::Module::TypeCollection
  def [](name); end
  def initialize(mod); end
  def named(name); end
end
class LLVM::Module::GlobalCollection
  def [](key); end
  def add(ty, name); end
  def delete(global); end
  def each; end
  def first; end
  def initialize(mod); end
  def last; end
  def named(name); end
  def next(global); end
  def previous(global); end
  include Enumerable
end
class LLVM::Module::FunctionCollection
  def [](key); end
  def add(name, *args); end
  def delete(function); end
  def each; end
  def first; end
  def initialize(mod); end
  def last; end
  def named(name); end
  def next(function); end
  def previous(function); end
  include Enumerable
end
class LLVM::Type
  def align; end
  def dump; end
  def element_type; end
  def kind; end
  def null; end
  def null_pointer; end
  def pointer(address_space = nil); end
  def self.array(ty, sz = nil); end
  def self.from_ptr(ptr, kind); end
  def self.function(arg_types, result_type, options = nil); end
  def self.pointer(ty, address_space = nil); end
  def self.rec; end
  def self.struct(elt_types, is_packed, name = nil); end
  def self.vector(ty, element_count); end
  def self.void; end
  def size; end
  include LLVM::PointerIdentity
end
class LLVM::IntType < LLVM::Type
  def width; end
end
class LLVM::FunctionType < LLVM::Type
  def argument_types; end
  def return_type; end
  def vararg?; end
end
class LLVM::StructType < LLVM::Type
  def element_types; end
  def element_types=(elt_types); end
  def name; end
end
class LLVM::Value
  def add_attribute(attr); end
  def constant?; end
  def dump; end
  def name; end
  def name=(str); end
  def null?; end
  def param_index(fun); end
  def param_parent; end
  def remove_attribute(attr); end
  def self.from_ptr(ptr); end
  def self.to_ptr; end
  def self.type; end
  def type; end
  def undefined?; end
  include LLVM::PointerIdentity
end
class LLVM::Argument < LLVM::Value
end
class LLVM::BasicBlock < LLVM::Value
  def build(builder = nil); end
  def first_instruction; end
  def instructions; end
  def last_instruction; end
  def next; end
  def parent; end
  def previous; end
  def self.create(fun = nil, name = nil); end
end
class LLVM::BasicBlock::InstructionCollection
  def each; end
  def first; end
  def initialize(block); end
  def last; end
  include Enumerable
end
class LLVM::User < LLVM::Value
  def operands; end
end
class LLVM::User::OperandCollection
  def [](i); end
  def []=(i, v); end
  def each; end
  def initialize(user); end
  def size; end
  include Enumerable
end
class LLVM::Constant < LLVM::User
  def bit_cast(type); end
  def bitcast_to(type); end
  def gep(*indices); end
  def ptr_to_int(type); end
  def self.null(type); end
  def self.null_ptr(type); end
  def self.undef(type); end
end
class LLVM::ConstantArray < LLVM::Constant
  def self.const(type, size_or_values, &block); end
  def self.string(str, null_terminate = nil); end
  def size; end
end
class LLVM::ConstantExpr < LLVM::Constant
end
class LLVM::ConstantInt < LLVM::Constant
  def &(rhs); end
  def *(rhs); end
  def +(rhs); end
  def -(rhs); end
  def -@; end
  def /(rhs); end
  def <<(bits); end
  def >>(bits); end
  def ^(rhs); end
  def add(rhs); end
  def and(rhs); end
  def ashr(bits); end
  def icmp(pred, rhs); end
  def int_to_ptr(type); end
  def mul(rhs); end
  def neg; end
  def not; end
  def nsw_add(rhs); end
  def nsw_mul(rhs); end
  def nsw_neg; end
  def nsw_sub(rhs); end
  def nuw_add(rhs); end
  def nuw_mul(rhs); end
  def nuw_neg; end
  def nuw_sub(rhs); end
  def or(rhs); end
  def rem(rhs); end
  def self.all_ones; end
  def self.from_i(n, signed = nil); end
  def self.parse(str, radix = nil); end
  def shl(bits); end
  def shr(bits); end
  def sub(rhs); end
  def udiv(rhs); end
  def urem(rhs); end
  def xor(rhs); end
  def |(rhs); end
  def ~; end
end
class LLVM::Int32 < LLVM::ConstantInt
  def self.type; end
end
class LLVM::Int1 < LLVM::ConstantInt
  def self.type; end
end
class LLVM::ConstantReal < LLVM::Constant
  def *(rhs); end
  def +(rhs); end
  def -@; end
  def /(rhs); end
  def fcmp(pred, rhs); end
  def rem(rhs); end
  def self.from_f(n); end
  def self.parse(type, str); end
end
class LLVM::Float < LLVM::ConstantReal
  def self.type; end
end
class LLVM::Double < LLVM::ConstantReal
  def self.type; end
end
class LLVM::ConstantStruct < LLVM::Constant
  def self.const(size_or_values, packed = nil, &block); end
  def self.named_const(type, size_or_values, &block); end
end
class LLVM::ConstantVector < LLVM::Constant
  def self.all_ones; end
  def self.const(size_or_values, &block); end
  def size; end
end
class LLVM::GlobalValue < LLVM::Constant
  def alignment; end
  def alignment=(bytes); end
  def declaration?; end
  def dll_storage_class; end
  def dll_storage_class=(klass); end
  def global_constant=(flag); end
  def global_constant?; end
  def initializer; end
  def initializer=(val); end
  def linkage; end
  def linkage=(linkage); end
  def section; end
  def section=(section); end
  def unnamed_addr=(flag); end
  def unnamed_addr?; end
  def visibility; end
  def visibility=(viz); end
end
class LLVM::Function < LLVM::GlobalValue
  def add_attribute(attr, index = nil); end
  def attribute_count; end
  def attributes; end
  def basic_blocks; end
  def call_conv=(conv); end
  def do_verification(action); end
  def function_attributes; end
  def function_type; end
  def gc; end
  def gc=(name); end
  def param_attributes(index); end
  def params; end
  def remove_attribute(attr, index = nil); end
  def return_attributes; end
  def type; end
  def verify!; end
  def verify; end
end
class LLVM::Function::AttributeCollection
  def add(attr); end
  def attribute_id(attr_name); end
  def attribute_name(attr_name); end
  def count; end
  def initialize(fun, index); end
  def remove(attr); end
  def to_a; end
end
class LLVM::Function::BasicBlockCollection
  def append(name = nil); end
  def each; end
  def entry; end
  def first; end
  def initialize(fun); end
  def last; end
  def size; end
  include Enumerable
end
class LLVM::Function::ParameterCollection
  def [](i); end
  def each; end
  def initialize(fun); end
  def size; end
  include Enumerable
end
class LLVM::GlobalAlias < LLVM::GlobalValue
end
class LLVM::GlobalVariable < LLVM::GlobalValue
  def initializer; end
  def initializer=(val); end
  def thread_local=(local); end
  def thread_local?; end
end
class LLVM::Instruction < LLVM::User
  def next; end
  def parent; end
  def previous; end
end
class LLVM::CallInst < LLVM::Instruction
  def call_conv; end
  def call_conv=(conv); end
end
class LLVM::Phi < LLVM::Instruction
  def add_incoming(incoming); end
end
class LLVM::SwitchInst < LLVM::Instruction
  def add_case(val, block); end
end
class LLVM::IndirectBr < LLVM::Instruction
  def <<(dest); end
  def add_dest(dest); end
end
class LLVM::Builder
  def add(lhs, rhs, name = nil); end
  def aggregate_ret(*vals); end
  def alloca(ty, name = nil); end
  def and(lhs, rhs, name = nil); end
  def array_alloca(ty, sz, name = nil); end
  def array_malloc(ty, sz, name = nil); end
  def ashr(lhs, rhs, name = nil); end
  def bit_cast(val, ty, name = nil); end
  def br(block); end
  def call(fun, *args); end
  def cond(cond, iftrue, iffalse); end
  def dispose; end
  def exact_sdiv(lhs, rhs, name = nil); end
  def extract_element(vector, idx, name = nil); end
  def extract_value(aggregate, idx, name = nil); end
  def fadd(lhs, rhs, name = nil); end
  def fcmp(pred, lhs, rhs, name = nil); end
  def fdiv(lhs, rhs, name = nil); end
  def fmul(lhs, rhs, name = nil); end
  def fp2si(val, ty, name = nil); end
  def fp2ui(val, ty, name = nil); end
  def fp_cast(val, ty, name = nil); end
  def fp_ext(val, ty, name = nil); end
  def fp_trunc(val, ty, name = nil); end
  def free(ptr); end
  def frem(lhs, rhs, name = nil); end
  def fsub(lhs, rhs, name = nil); end
  def gep(ptr, indices, name = nil); end
  def global_string(string, name = nil); end
  def global_string_pointer(string, name = nil); end
  def ibr(addr, num_dests); end
  def icmp(pred, lhs, rhs, name = nil); end
  def inbounds_gep(ptr, indices, name = nil); end
  def initialize; end
  def insert_block; end
  def insert_element(vector, elem, idx, name = nil); end
  def insert_value(aggregate, elem, idx, name = nil); end
  def int2ptr(val, ty, name = nil); end
  def int_cast(val, ty, name = nil); end
  def invoke(fun, args, normal, exception, name = nil); end
  def is_not_null(val, name = nil); end
  def is_null(val, name = nil); end
  def load(ptr, name = nil); end
  def lshr(lhs, rhs, name = nil); end
  def malloc(ty, name = nil); end
  def mul(lhs, rhs, name = nil); end
  def neg(arg, name = nil); end
  def not(arg, name = nil); end
  def nsw_add(lhs, rhs, name = nil); end
  def nsw_mul(lhs, rhs, name = nil); end
  def nsw_neg(arg, name = nil); end
  def nsw_sub(lhs, rhs, name = nil); end
  def nuw_add(lhs, rhs, name = nil); end
  def nuw_mul(lhs, rhs, name = nil); end
  def nuw_neg(arg, name = nil); end
  def nuw_sub(lhs, rhs, name = nil); end
  def or(lhs, rhs, name = nil); end
  def phi(ty, incoming, name = nil); end
  def pointer_cast(val, ty, name = nil); end
  def position(block, instruction); end
  def position_at_end(block); end
  def position_before(instruction); end
  def ptr2int(val, ty, name = nil); end
  def ptr_diff(lhs, rhs, name = nil); end
  def ret(val); end
  def ret_void; end
  def sdiv(lhs, rhs, name = nil); end
  def select(_if, _then, _else, name = nil); end
  def sext(val, ty, name = nil); end
  def sext_or_bit_cast(val, ty, name = nil); end
  def shl(lhs, rhs, name = nil); end
  def shuffle_vector(vec1, vec2, mask, name = nil); end
  def si2fp(val, ty, name = nil); end
  def srem(lhs, rhs, name = nil); end
  def store(val, ptr); end
  def struct_gep(pointer, idx, name = nil); end
  def sub(lhs, rhs, name = nil); end
  def switch(val, default, cases); end
  def to_ptr; end
  def trunc(val, ty, name = nil); end
  def trunc_or_bit_cast(val, ty, name = nil); end
  def udiv(lhs, rhs, name = nil); end
  def ui2fp(val, ty, name = nil); end
  def unreachable; end
  def unwind; end
  def urem(lhs, rhs, name = nil); end
  def xor(lhs, rhs, name = nil); end
  def zext(val, ty, name = nil); end
  def zext_or_bit_cast(val, ty, name = nil); end
end
class LLVM::PassManager
  def <<(name); end
  def adce!; end
  def always_inline!; end
  def arg_promote!; end
  def basicaa!; end
  def const_merge!; end
  def constprop!; end
  def cvprop!; end
  def dae!; end
  def dispose; end
  def dse!; end
  def early_cse!; end
  def finalize; end
  def fun_attrs!; end
  def gdce!; end
  def global_opt!; end
  def gvn!; end
  def indvars!; end
  def initialize(machine = nil); end
  def inline!; end
  def instcombine!; end
  def internalize!(all_but_main = nil); end
  def ipcp!; end
  def ipsccp!; end
  def jump_threading!; end
  def licm!; end
  def loop_deletion!; end
  def loop_idiom!; end
  def loop_rotate!; end
  def loop_unroll!; end
  def loop_unswitch!; end
  def lower_expect!; end
  def mem2reg!; end
  def memcpyopt!; end
  def prune_eh!; end
  def reassociate!; end
  def reg2mem!; end
  def run(mod); end
  def scalarrepl!; end
  def scalarrepl_ssa!; end
  def scalarrepl_threshold!(threshold); end
  def sccp!; end
  def sdp!; end
  def simplify_libcalls!; end
  def simplifycfg!; end
  def strip!; end
  def tailcallelim!; end
  def tbaa!; end
  def to_ptr; end
end
class LLVM::FunctionPassManager < LLVM::PassManager
  def finalize; end
  def initialize(machine, mod); end
  def run(fn); end
end
class LLVM::MemoryBuffer
  def dispose; end
  def initialize(ptr); end
  def self.from_file(path); end
  def self.from_stdin; end
  def self.new(*arg0); end
  def to_ptr; end
end
class LLVM::C::OpaqueTargetData < FFI::Struct
end
class LLVM::C::OpaqueTargetLibraryInfotData < FFI::Struct
end
class LLVM::C::OpaqueTargetMachine < FFI::Struct
end
module LLVM::C::TargetWrappers
  def has_asm_backend; end
  def has_jit; end
  def has_target_machine; end
end
class LLVM::C::Target < FFI::Struct
  include LLVM::C::TargetWrappers
end
class LLVM::Target
  def asm_backend?; end
  def create_machine(triple, cpu = nil, features = nil, opt_level = nil, reloc = nil, code_model = nil); end
  def description; end
  def jit?; end
  def name; end
  def self.by_name(name); end
  def self.each(&block); end
  def self.from_ptr(ptr); end
  def self.init(target, asm_printer = nil); end
  def self.init_all(asm_printer = nil); end
  def self.init_native(asm_printer = nil); end
  def target_machine?; end
  include LLVM::PointerIdentity
end
class LLVM::TargetMachine
  def cpu; end
  def dispose; end
  def emit(mod, filename, codegen = nil); end
  def features; end
  def self.from_ptr(ptr); end
  def target; end
  def triple; end
  include LLVM::PointerIdentity
end
class LLVM::TargetDataLayout
  def abi_alignment_of(type); end
  def abi_size_of(type); end
  def bit_size_of(type); end
  def byte_order; end
  def call_frame_alignment_of(type); end
  def dispose; end
  def element_at_offset(type, offset); end
  def initialize(representation); end
  def int_ptr_type(addr_space = nil); end
  def offset_of_element(type, element); end
  def pointer_size(addr_space = nil); end
  def preferred_alignment_of(entity); end
  def self.from_ptr(ptr); end
  def storage_size_of(type); end
  def to_ptr; end
  def to_s; end
end
class LLVM::C::OpaqueGenericValue < FFI::Struct
end
class LLVM::C::OpaqueExecutionEngine < FFI::Struct
end
class LLVM::C::OpaqueMCJITMemoryManager < FFI::Struct
end
class LLVM::C::MCJITCompilerOptions < FFI::Struct
end
class LLVM::ExecutionEngine
  def create_execution_engine_for_module(out_ee, mod, out_error, options); end
  def data_layout; end
  def dispose; end
  def function_address(name); end
  def functions; end
  def initialize(mod, options); end
  def modules; end
  def pointer_to_global(global); end
  def run_function(fun, *args); end
  def target_machine; end
  def to_ptr; end
end
class LLVM::ExecutionEngine::ModuleCollection
  def <<(mod); end
  def add(mod); end
  def delete(mod); end
  def initialize(engine); end
end
class LLVM::ExecutionEngine::FunctionCollection
  def [](name); end
  def initialize(engine); end
  def named(name); end
end
class LLVM::MCJITCompiler < LLVM::ExecutionEngine
  def convert_type(type); end
  def create_execution_engine_for_module(out_ee, mod, out_error, options); end
  def initialize(mod, options = nil); end
  def run_function(fun, *args); end
end
class LLVM::GenericValue
  def dispose; end
  def self.from_b(b); end
  def self.from_d(val); end
  def self.from_f(f); end
  def self.from_i(i, options = nil); end
  def self.from_ptr(ptr); end
  def self.from_value_ptr(ptr); end
  def to_b; end
  def to_f(type = nil); end
  def to_i(signed = nil); end
  def to_ptr; end
  def to_value_ptr; end
end
class LLVM::C::OpaquePassManagerBuilder < FFI::Struct
end
